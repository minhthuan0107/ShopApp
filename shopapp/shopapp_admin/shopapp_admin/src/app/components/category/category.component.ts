import { CommonModule } from '@angular/common';
import { Component, ViewChild } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';
import { MatSort, MatSortModule } from '@angular/material/sort';
import { MatTableDataSource, MatTableModule } from '@angular/material/table';
import { MatTooltipModule } from '@angular/material/tooltip';
import { CategoryService } from '../../services/category.service';
import { Category } from '../../models/category.model';
import { AddCategoryComponent } from '../add-category/add-category.component';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-category',
  standalone: true,
  imports: [CommonModule, FormsModule,
    MatTableModule,
    MatPaginatorModule,
    MatSortModule,
    MatFormFieldModule,
    MatInputModule,
    MatIconModule,
    MatButtonModule,
    MatTooltipModule,
    AddCategoryComponent],
  templateUrl: './category.component.html',
  styleUrl: './category.component.scss'
})
export class CategoryComponent {
  totalItems: number = 0;
  keyword: string = '';
  displayedColumns: string[] = ['id', 'name', 'actions'];
  dataSource = new MatTableDataSource<any>();

  // üëá D√πng ViewChild ƒë·ªÉ l·∫•y ƒë·ªëi t∆∞·ª£ng MatPaginator t·ª´ template
  @ViewChild(MatPaginator) paginator!: MatPaginator;
  @ViewChild(MatSort) sort!: MatSort;
  constructor(
    private categoryService: CategoryService,
  ) { }
  ngOnInit() {
    this.getAllCategories();
  }
  ngAfterViewInit() {
    this.dataSource.sort = this.sort;
  }
  //H√†m l·∫•y danh s√°ch danh m·ª•c
  getAllCategories() {
    this.categoryService.getAllCategories().subscribe({
      next: (res) => {
        this.dataSource.data = res.data;
        this.dataSource.paginator = this.paginator;
        //ƒê·ªãnh nghƒ©a c√°ch l·ªçc
        this.dataSource.filterPredicate = (data: Category, filter: string) => {
          const keyword = filter;
          return data.name.toLowerCase().includes(keyword) || data.id.toString().includes(keyword);
        };
      },
      error: (err) => {
        console.error('‚ùå L·ªói:', err?.error?.message || 'L·ªói khi t·∫£i danh m·ª•c');
      }
    });
  }
  //H√†m load l·∫°i danh s√°ch danh m·ª•c
  onCategoryAdded() {
    // Reload l·∫°i danh s√°ch danh m·ª•c s·∫£n ph·∫©m
    this.getAllCategories();
  }
  applyFilter() {
    this.dataSource.filter = this.keyword.trim().toLowerCase();
  }
  //H√†m x√≥a m·ªÅm danh m·ª•c
  confirmDelete(category: Category): void {
    Swal.fire({
      title: 'X√°c nh·∫≠n x√≥a',
      text: `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a danh m·ª•c "${category.name}" kh√¥ng?`,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#3085d6',
      confirmButtonText: 'X√≥a',
      cancelButtonText: 'H·ªßy'
    }).then((result) => {
      if (result.isConfirmed) {
        this.categoryService.deleteCategoryById(category.id).subscribe({
          next: () => {
            Swal.fire({
              title: 'ƒê√£ x√≥a!',
              text: `S·∫£n ph·∫©m "${category.name}" ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.`,
              icon: 'success',
              timer: 2000,
              showConfirmButton: false
            });
            this.getAllCategories(); // Load l·∫°i danh s√°ch
          },
          error: (err) => {
            console.error('‚ùå L·ªói:', err?.error?.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh');
          }
        });
      }
    });
  }
}
